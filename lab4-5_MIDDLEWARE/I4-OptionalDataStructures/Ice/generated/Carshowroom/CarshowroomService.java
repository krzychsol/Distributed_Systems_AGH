//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `carshowroom.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Carshowroom;

public interface CarshowroomService extends com.zeroc.Ice.Object
{
    boolean addCarOptional(String brand, String model, java.util.OptionalInt year, com.zeroc.Ice.Current current);

    boolean addCarNoOptional(String brand, String model, int year, com.zeroc.Ice.Current current);

    boolean addCarStructOptional(CarOptional car, com.zeroc.Ice.Current current);

    boolean addCarStructNoOptional(CarNoOptional car, com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Carshowroom::CarshowroomService",
        "::Ice::Object"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Carshowroom::CarshowroomService";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_addCarOptional(CarshowroomService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_brand;
        String iceP_model;
        java.util.OptionalInt iceP_year;
        iceP_brand = istr.readString();
        iceP_model = istr.readString();
        iceP_year = istr.readInt(1);
        inS.endReadParams();
        boolean ret = obj.addCarOptional(iceP_brand, iceP_model, iceP_year, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_addCarNoOptional(CarshowroomService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_brand;
        String iceP_model;
        int iceP_year;
        iceP_brand = istr.readString();
        iceP_model = istr.readString();
        iceP_year = istr.readInt();
        inS.endReadParams();
        boolean ret = obj.addCarNoOptional(iceP_brand, iceP_model, iceP_year, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_addCarStructOptional(CarshowroomService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        final com.zeroc.IceInternal.Holder<CarOptional> icePP_car = new com.zeroc.IceInternal.Holder<>();
        istr.readValue(v -> icePP_car.value = v, CarOptional.class);
        istr.readPendingValues();
        inS.endReadParams();
        CarOptional iceP_car = icePP_car.value;
        boolean ret = obj.addCarStructOptional(iceP_car, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_addCarStructNoOptional(CarshowroomService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        final com.zeroc.IceInternal.Holder<CarNoOptional> icePP_car = new com.zeroc.IceInternal.Holder<>();
        istr.readValue(v -> icePP_car.value = v, CarNoOptional.class);
        istr.readPendingValues();
        inS.endReadParams();
        CarNoOptional iceP_car = icePP_car.value;
        boolean ret = obj.addCarStructNoOptional(iceP_car, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "addCarNoOptional",
        "addCarOptional",
        "addCarStructNoOptional",
        "addCarStructOptional",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_addCarNoOptional(this, in, current);
            }
            case 1:
            {
                return _iceD_addCarOptional(this, in, current);
            }
            case 2:
            {
                return _iceD_addCarStructNoOptional(this, in, current);
            }
            case 3:
            {
                return _iceD_addCarStructOptional(this, in, current);
            }
            case 4:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 5:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 6:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 7:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
